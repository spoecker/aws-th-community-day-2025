---
#------------------------------------------------------
# Parameters
#------------------------------------------------------
Parameters:
  ACMCertificate:
    Type: String
    Description: AWS ACM certificate ARN to use for the ALB (need to be created first manually). Optional
    Default: none

Conditions:
  CreateHTTPSListener: !Not
    - !Equals
      - !Ref ACMCertificate
      - none
#------------------------------------------------------
# Resources
#------------------------------------------------------
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  #------------------------------------------------------
  # Resources: internet gateway
  #------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ig

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #------------------------------------------------------
  # Resources: public and private subnets
  #------------------------------------------------------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2

  #------------------------------------------------------
  # Resources: public route table
  #------------------------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-rt

  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt

  #------------------------------------------------------
  # Resources: routeable subnet associations
  #------------------------------------------------------
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  #------------------------------------------------------
  # Security Group:
  #------------------------------------------------------
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public access on port 80
      VpcId: !Ref VPC

  EC2GroupALBIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows worker nodes to communicate with the control plane
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      FromPort: 80
      ToPort: 80

  EC2GroupPublicIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows HTTP access
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80

  EC2GroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress for environment
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public access on port 80 and 443
      VpcId: !Ref VPC

  ALBHTTPSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows HTTP access
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80

  ALBHTTPSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows HTTPS access
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 443
      ToPort: 443

  ALBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress for environment
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  #ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: client_keep_alive.seconds
          Value: 60
        - Key: idle_timeout.timeout_seconds
          Value: 1

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ListenerSecure:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateHTTPSListener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref ACMCertificate
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  SingleInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-03a065a39621a53b7 #Amazon Linux 2023 ap-southeast-7
      InstanceType: t3.small
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -y
          dnf install docker git -y
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user
          # Install Docker Compose
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          #Get Metadata
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
          PUBLIC_HOSTNAME=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-hostname`
          echo $PUBLIC_HOSTNAME
          #Upload this archive and replace this path
          cd /home/ec2-user/
          git clone https://github.com/spoecker/aws-th-community-day-2025.git
          cd aws-th-community-day-2025/1_POC/
          docker-compose up -d
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-instance-2

  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-03a065a39621a53b7 # Amazon Linux 2023 ap-southeast-7
        InstanceType: t3.small
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref EC2SecurityGroup
            DeleteOnTermination: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            dnf update -y
            dnf install docker git -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            # Install Docker Compose
            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            # Upload this archive and replace this path
            cd /home/ec2-user/
            git clone https://github.com/spoecker/aws-th-community-day-2025.git
            cd aws-th-community-day-2025/1_POC/
            docker-compose up -d

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 30
      Tags:
        - Key: Name
          Value: ASGInstance
          PropagateAtLaunch: true

#------------------------------------------------------
# Export:
#------------------------------------------------------
Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-vpc
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-2
  InternetGateway:
    Value: !Ref InternetGateway
    Export:
      Name: !Sub ${AWS::StackName}-igw
  ALBDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: ALB DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-alb-dns-name
