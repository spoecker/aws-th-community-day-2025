---
#------------------------------------------------------
# Parameters
#------------------------------------------------------
Parameters:
  RDSMasterUserName:
    Type: String
    Description: Demo User name
    Default: demoUserName

  RDSMasterUserPassword:
    Type: String
    Description: Password for the RDS Master User
    NoEcho: true

  ImagePHP:
    Type: String
    Description: Docker image to use
    Default: aws-community-php

  ImageNGINX:
    Type: String
    Description: Docker image to use
    Default: aws-community-nginx

  ACMCertificate:
    Type: String
    Description: AWS ACM certificate ARN to use for the ALB (need to be created first manually). Optional
    Default: none

Conditions:
  CreateHTTPSListener: !Not
    - !Equals
      - !Ref ACMCertificate
      - none
#------------------------------------------------------
# Resources
#------------------------------------------------------
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  #------------------------------------------------------
  # Resources: internet gateway
  #------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ig

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #------------------------------------------------------
  # Resources: public and private subnets
  #------------------------------------------------------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2

  #------------------------------------------------------
  # Resources: public route table
  #------------------------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-rt

  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt

  #------------------------------------------------------
  # NAT Gateway
  #------------------------------------------------------

  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt "EIP.AllocationId"
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

  RouteNATSubnet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway
  #------------------------------------------------------
  # Resources: routeable subnet associations
  #------------------------------------------------------
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  #------------------------------------------------------
  # Security Group:
  #------------------------------------------------------
  ECSFargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public access on port 80
      VpcId: !Ref VPC

  ECSFargateSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows worker nodes to communicate with the control plane
      GroupId: !Ref ECSFargateSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      FromPort: 80
      ToPort: 80

  ECSFargateSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress for environment
      GroupId: !Ref ECSFargateSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public access on port 80 and 443
      VpcId: !Ref VPC

  ALBHTTPSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows HTTP access
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80

  ALBHTTPSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows HTTPS access
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 443
      ToPort: 443

  ALBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress for environment
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC

  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow connection from ECS container
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ECSFargateSecurityGroup
      GroupId: !Ref RDSSecurityGroup

  RDSSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow all outbound traffic
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  #------------------------------------------------------
  # RDS:
  #------------------------------------------------------

  myDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Description of subnet group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  MyDB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      EngineVersion: "17.2"
      MasterUsername: !Ref RDSMasterUserName
      MasterUserPassword: !Ref RDSMasterUserPassword
      PubliclyAccessible: false
      StorageType: gp3
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBName: postgres
      DBParameterGroupName: !Ref RDSDBParameterGroup

  RDSDBParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Description: CloudFormation Sample Parameter Group
      Family: postgres17
      Parameters:
        rds.force_ssl: 1

  #------------------------------------------------------
  # ECS:
  #------------------------------------------------------
  ecscluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT

  #------------------------------------------------------
  # Resources: task role, task execution role
  #------------------------------------------------------
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-TaskExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  #------------------------------------------------------
  # Task Definition
  #------------------------------------------------------
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "aws-community"
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: webserver
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageNGINX}:latest
          PortMappings:
            - ContainerPort: 80
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "wget -O /dev/null http://localhost || exit 1"
            Interval: 5
            Retries: 1
            StartPeriod: 5
            Timeout: 5
          Privileged: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: aws-community
        - Name: php
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImagePHP}:latest
          Privileged: false
          HealthCheck:
            Command:
              - "CMD"
              - "sh"
              - "/usr/local/bin/healthcheck.sh"
            Interval: 5
            Retries: 1
            StartPeriod: 5
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: aws-community
          Environment:
            - Name: DB_HOST
              Value: !GetAtt MyDB.Endpoint.Address
            - Name: DB_PORT
              Value: "5432"
            - Name: DB_USERNAME
              Value: !Ref RDSMasterUserName
            - Name: DB_PASSWORD
              Value: !Ref RDSMasterUserPassword
            - Name: DB_DATABASE
              Value: postgres
            - Name: PGSSLMODE
              Value: verify-full
            - Name: TZ
              Value: Asia/Bangkok

  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: "/ecs/aws-community"
      RetentionInDays: 7

  #ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ListenerSecure:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateHTTPSListener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref ACMCertificate
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ECSService:
    DependsOn: Listener
    Type: AWS::ECS::Service
    Properties:
      ServiceName: aws-community-demo-service
      TaskDefinition: !Ref TaskDefinition
      Cluster: !Ref ecscluster
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSFargateSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: webserver
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 30

#------------------------------------------------------
# Export:
#------------------------------------------------------
Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-vpc
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-2
  InternetGateway:
    Value: !Ref InternetGateway
    Export:
      Name: !Sub ${AWS::StackName}-igw
  ECSFargateSecurityGroup:
    Value: !Ref ECSFargateSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ecs-fargate-sg
  RDSSecurityGroup:
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-rds-sg
  TaskDefinition:
    Description: Task Definition
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-task-def"
  TaskExecutionRole:
    Description: Task Execution Role
    Value: !Ref TaskExecutionRole
    Export:
      Name: !Sub "${AWS::StackName}-task-execution-role"

  ALBDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: ALB DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-alb-dns-name
